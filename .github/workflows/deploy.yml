name: Frontend CI and Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_ENV: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ github.ref_name == 'main' && secrets.VERCEL_PROD_PROJECT_ID || secrets.VERCEL_STAGING_PROJECT_ID }}
  JWT_SECRET: ${{ github.ref_name == 'main' && secrets.PROD_JWT_SECRET || secrets.STAGING_JWT_SECRET }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_SUPABASE_URL || secrets.STAGING_NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_SUPABASE_ANON_KEY || secrets.STAGING_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || secrets.STAGING_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
  NEXT_PUBLIC_API_URL: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_API_URL || secrets.STAGING_NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_APP_URL: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_APP_URL || secrets.STAGING_NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_RAZORPAY_KEY_ID: ${{ github.ref_name == 'main' && secrets.PROD_NEXT_PUBLIC_RAZORPAY_KEY_ID || secrets.STAGING_NEXT_PUBLIC_RAZORPAY_KEY_ID }}

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Debug build environment
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          echo "tsconfig.json contents:"
          cat tsconfig.json || echo "tsconfig.json not found"
          echo "src directory contents:"
          ls -la src || echo "src directory not found"
          echo "NODE_ENV: $NODE_ENV"

      - name: Build project
        run: npm run ${{ github.ref_name == 'main' && 'build:prod' || 'build:dev' }}

      - name: Run tests
        run: npm run test || echo "No tests defined yet."

  deploy:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push'
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run ${{ github.ref_name == 'main' && 'build:prod' || 'build:dev' }}

      - name: Check for required secrets
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "Error: VERCEL_TOKEN is not set."
            exit 1
          fi
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "Error: VERCEL_ORG_ID is not set."
            exit 1
          fi
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Error: VERCEL_PROJECT_ID is not set."
            exit 1
          fi
          if [ -z "$JWT_SECRET" ]; then
            echo "Error: JWT_SECRET is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_URL is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_ANON_KEY is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY" ]; then
            echo "Error: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_API_URL" ]; then
            echo "Error: NEXT_PUBLIC_API_URL is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_APP_URL" ]; then
            echo "Error: NEXT_PUBLIC_APP_URL is not set."
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_RAZORPAY_KEY_ID" ]; then
            echo "Error: NEXT_PUBLIC_RAZORPAY_KEY_ID is not set."
            exit 1
          fi

      - name: Log environment variables
        run: |
          echo "NODE_ENV: $NODE_ENV"
          echo "JWT_SECRET: ${JWT_SECRET:0:10}..."
          echo "NEXT_PUBLIC_SUPABASE_URL: $NEXT_PUBLIC_SUPABASE_URL"
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY:0:10}..."
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:0:10}..."
          echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
          echo "NEXT_PUBLIC_APP_URL: $NEXT_PUBLIC_APP_URL"
          echo "NEXT_PUBLIC_RAZORPAY_KEY_ID: ${NEXT_PUBLIC_RAZORPAY_KEY_ID:0:10}..."

      - name: Deploy to Vercel
        run: |
          vercel --token $VERCEL_TOKEN --prod=${{ github.ref_name == 'main' && 'true' || 'false' }} --confirm
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ github.ref_name == 'main' && secrets.VERCEL_PROD_PROJECT_ID || secrets.VERCEL_STAGING_PROJECT_ID }}

      - name: Verify deployment
        run: |
          if [ -z "$(vercel ls --token $VERCEL_TOKEN | grep 'lms-ui-eta')" ]; then
            echo "Error: Deployment not found."
            exit 1
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
